// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	accountsFieldNames          = builder.RawFieldNames(&Accounts{})
	accountsRows                = strings.Join(accountsFieldNames, ",")
	accountsRowsExpectAutoSet   = strings.Join(stringx.Remove(accountsFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	accountsRowsWithPlaceHolder = strings.Join(stringx.Remove(accountsFieldNames, "`name`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	accountsModel interface {
		Insert(ctx context.Context, data *Accounts) (sql.Result, error)
		FindOne(ctx context.Context, name string) (*Accounts, error)
		Update(ctx context.Context, data *Accounts) error
		Delete(ctx context.Context, name string) error
	}

	defaultAccountsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Accounts struct {
		Name         string `db:"name"`
		HashPassword string `db:"hash_password"`
		Email        string `db:"email"`
	}
)

func newAccountsModel(conn sqlx.SqlConn) *defaultAccountsModel {
	return &defaultAccountsModel{
		conn:  conn,
		table: "`accounts`",
	}
}

func (m *defaultAccountsModel) Delete(ctx context.Context, name string) error {
	query := fmt.Sprintf("delete from %s where `name` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, name)
	return err
}

func (m *defaultAccountsModel) FindOne(ctx context.Context, name string) (*Accounts, error) {
	query := fmt.Sprintf("select %s from %s where `name` = ? limit 1", accountsRows, m.table)
	var resp Accounts
	err := m.conn.QueryRowCtx(ctx, &resp, query, name)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAccountsModel) Insert(ctx context.Context, data *Accounts) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, accountsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.HashPassword, data.Email)
	return ret, err
}

func (m *defaultAccountsModel) Update(ctx context.Context, data *Accounts) error {
	query := fmt.Sprintf("update %s set %s where `name` = ?", m.table, accountsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.HashPassword, data.Email, data.Name)
	return err
}

func (m *defaultAccountsModel) tableName() string {
	return m.table
}
