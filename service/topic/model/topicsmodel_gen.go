// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	topicsFieldNames          = builder.RawFieldNames(&Topics{})
	topicsRows                = strings.Join(topicsFieldNames, ",")
	topicsRowsExpectAutoSet   = strings.Join(stringx.Remove(topicsFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	topicsRowsWithPlaceHolder = strings.Join(stringx.Remove(topicsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	topicsModel interface {
		Insert(ctx context.Context, data *Topics) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Topics, error)
		Update(ctx context.Context, data *Topics) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTopicsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Topics struct {
		Id          int64          `db:"id"`
		Name        string         `db:"name"`
		Description string         `db:"description"`
		FileUrl     sql.NullString `db:"file_url"`
		CreateBy    string         `db:"create_by"`
		CreatedAt   int64          `db:"created_at"`
	}
)

func newTopicsModel(conn sqlx.SqlConn) *defaultTopicsModel {
	return &defaultTopicsModel{
		conn:  conn,
		table: "`topics`",
	}
}

func (m *defaultTopicsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTopicsModel) FindOne(ctx context.Context, id int64) (*Topics, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", topicsRows, m.table)
	var resp Topics
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTopicsModel) Insert(ctx context.Context, data *Topics) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, topicsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Name, data.Description, data.FileUrl, data.CreateBy)
	return ret, err
}

func (m *defaultTopicsModel) Update(ctx context.Context, data *Topics) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, topicsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Description, data.FileUrl, data.CreateBy, data.Id)
	return err
}

func (m *defaultTopicsModel) tableName() string {
	return m.table
}
